float circleSdf(vec2 center, float r, vec2 uv) {
    float color = length(uv - center) - r;
    return step(color, 0.0);
}

float rectSdf(vec2 bl, vec2 tr, vec2 uv){
   
    float leftEdge = bl.x-uv.x;
    float rightEdge = uv.x-tr.x;
    float topEdge = uv.y-tr.y;
    float bottomEdge = bl.y-uv.y;

    float color = max(leftEdge, max(rightEdge, max(topEdge, bottomEdge)));

    return step(color, 0.0);
}

float parallelogramSdf( in vec2 p, float wi, float he, float sk )
{
    vec2 e = vec2(sk,he);
    p = (p.y<0.0)?-p:p;
    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);
    vec2  d = vec2(dot(w,w), -w.y);
    float s = p.x*e.y - p.y*e.x;
    p = (s<0.0)?-p:p;
    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);
    d = min( d, vec2(dot(v,v), wi*he-abs(s)));
    return step(sqrt(d.x)*sign(-d.y), 0.0);
}

float cutDiskSdf( in vec2 p, in float r, in float h )
{
    float w = sqrt(r*r-h*h); // constant for any given shape
    p.x = abs(p.x);
    float s = max( (h-r)*p.x*p.x+w*w*(h+r-2.0*p.y), h*p.x-w*p.y );
    return step((s<0.0) ? length(p)-r :
           (p.x<w) ? h - p.y     :
                     length(p-vec2(w,h)), 0.0);
}