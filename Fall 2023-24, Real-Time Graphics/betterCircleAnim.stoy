#include "sdf.stoy"
#include "transform2d.stoy"
#include "easing.stoy"
#define PI 3.14159265359
#define PERIOD 2.0

void mainImage(out vec4 fragColor, in vec2 fragCoord) {

    vec3 uv = vec3(fragCoord / iResolution.xy, 1.0);
    uv.xy -= 0.5;
    uv.x *= iResolution.x / iResolution.y;

    float phase = floor(mod(iTime / PERIOD, 3.0));


    float insideR = step(length(uv.xy - vec2(0.0, 0.1598)), 0.3);
    uv = rotateMat(easeInOutQuad(mod(iTime / PERIOD, 1.0)) * insideR * ( phase == 0.0 ? 1.0 : 0.0 ) * 4.0 * PI / PERIOD, vec2(0.0, 0.1598)) * uv;

    float insideG = step(length(uv.xy - vec2(-0.15, -0.1)), 0.3);
    uv = rotateMat(easeInOutQuad(mod(iTime / PERIOD, 1.0)) * insideG * ( phase == 1.0 ? 1.0 : 0.0 ) * 4.0 * PI / PERIOD, vec2(-0.15, -0.1)) * uv;

    float insideB = step(length(uv.xy - vec2(0.15, -0.1)), 0.3);
    uv = rotateMat(easeInOutQuad(mod(iTime / PERIOD, 1.0)) * insideB * ( phase == 2.0 ? 1.0 : 0.0 ) * 4.0 * PI / PERIOD, vec2(0.15, -0.1)) * uv;

    float cR = circleSdfNoStep(vec2(0.0, 0.1598), 0.3, uv.xy);
    float cG = circleSdfNoStep(vec2(-0.15, -0.1), 0.3, uv.xy);
    float cB = circleSdfNoStep(vec2(0.15, -0.1), 0.3, uv.xy);

    vec3 color = vec3(0.0);
    color += vec3(1.0, 0.0, 0.0) * step(cR, 0.0);
    color += vec3(0.0, 1.0, 0.0) * step(cG, 0.0);
    color += vec3(0.0, 0.0, 1.0) * step(cB, 0.0);

    // circle for debugging
    // color += vec3(easeInOutQuad(mod(iTime / PERIOD, 1.0)), 1.0, 1.0) * circleSdf(vec2(-0.4, 0.4), 0.1, uv.xy);

    fragColor = vec4(color, 1.0);
}